#!/usr/bin/perl

=head1 NAME

switchman

=head1 USAGE

    switchman --config /path/to/CONFIG --group GROUP [--lockname LOCKNAME] -- CMD [ARGS]

    CONFIG file is expected to be a json string with keys
        - prefix  -- node path, contains configuration data and lock nodes
        - zkhosts -- where to connect
    Example:
        {"zkhosts":"zk1:2181,zk2:2181,zk3:2181", "prefix":"/switchman"}

    GROUP must be one of the groups described in zk

    LOCKNAME can be specifed as an option, by default basename of CMD is used

=head1 DESCRIPTION

The purpose of this tool is organizing distributed job execution.

Jobs are to be divided into groups, each group is described by a list of
hostnames, where execution is allowed at the moment. This configuration is
stored in ZooKeeper.

Simultaneous execution of same commands is avoided by acquiring a lock in
ZooKeeper (under the same node that holds the configuration data).
Though, it is still possible to provide different lock names and to run more
than one copy of the same command, if it is necessary.
For more details on locks see [1].

While the command is running, a separate process regularly checks if the lock
still exists and that group description hasn't been changed. If any of these
checks fails, the command is terminated.

[1] http://zookeeper.apache.org/doc/r3.4.4/recipes.html#sc_recipes_Locks

=cut

use strict;
use warnings;

use App::Switchman;
use Net::ZooKeeper qw(:errors);
use Net::ZooKeeper::Lock;
use POSIX qw(WNOHANG);
use Pod::Usage;
use Sys::Hostname::FQDN qw(fqdn);

my $options = App::Switchman::process_arguments(\@ARGV);

usage() if $options->{help};
my $CONFIG_PATH = $options->{CONFIG_PATH};
my $GROUP = $options->{GROUP};
my $LOCKNAME = $options->{LOCKNAME} or die "See $0 --help\n";
die "--config is missing\n" unless $CONFIG_PATH;
die "--group is missing\n" unless $GROUP;
die "lockname is too long: $LOCKNAME\n" if length($LOCKNAME) > 512; # safe limit, ZooKeeper can handle path length up to 1024

my $config = App::Switchman::get_and_check_config($CONFIG_PATH);

# OK to start

my $zkh = Net::ZooKeeper->new($config->{zkhosts});
my $data_watch = $zkh->watch();
my $data = $zkh->get($config->{prefix}, watch => $data_watch) or die 'Could not get data: '.$zkh->get_error();

unless (App::Switchman::is_group_serviced($GROUP, $data)) {
    App::Switchman::debug("Group <$GROUP> is not serviced at the moment");
    exit;
}

my $lock = Net::ZooKeeper::Lock->new({
    blocking => 0,
    data => fqdn()." $$",
    lock_name => $LOCKNAME,
    lock_prefix => $config->{prefix},
    zkh => $zkh,
});

unless ($lock) {
    my $error = $zkh->get_error();
    if ($error > ZAPIERROR) {
        warn "Could not acquire lock for <$LOCKNAME>: $error";
    }
    exit;
}

my $lock_watch = $zkh->watch();
$zkh->exists($lock->lock_path, watch => $lock_watch);

# We gonna create a single child process
# and help it die properly
our $CHILD;

# we want to exit right after our child dies
$SIG{CHLD} = sub {
    my $pid;
    do {
        $pid = waitpid -1, WNOHANG;
        if ($pid > 0) {
            warn "Child $pid exited with $?" if $?;
            # THE exit
            exit $?;
        }
    } while $pid > 0;
};

# If we suddenly die, we won't leave our child alone.
# Otherwise the process will be active and not holding the lock.
$SIG{__DIE__} = sub {
    if ($CHILD && kill 0 => $CHILD) {
        warn "Parent is terminating abnormally, killing child $CHILD";
        $SIG{CHLD} = "IGNORE";
        kill 9 => $CHILD or warn "Failed to KILL $CHILD";
    }
};

$CHILD = fork();
die "Could not fork" unless defined $CHILD;
if ($CHILD) {
    while (1) {
        if ($lock_watch->{state}) {
            warn "It's not secure to proceed, lock watch received $lock_watch->{event}";
            App::Switchman::stop_child($CHILD);
            last;
        }
        if ($data_watch->{state}) {
            my $new_data = $zkh->get($config->{prefix}, watch => $data_watch) or die 'Could not get data: '.$zkh->get_error();
            unless (App::Switchman::is_group_serviced($GROUP, $new_data)) {
                App::Switchman::debug("Group <$GROUP> is not serviced by current host anymore");
                App::Switchman::stop_child($CHILD);
                last;
            }
        }
        sleep 1;
    }
} else {
    # prevent calling zk_delete in $lock->DESTROY - it hangs forever and SIGCHLD never happens
    # let the parent unlock the node
    {
        no warnings 'redefine';
        *Net::ZooKeeper::Lock::DESTROY = sub {};
    }
    exec(@ARGV) or die "Failed to exec <".join(' ', @ARGV).">: $!\n";
}


=head2 usage

Shows help and exits

=cut

sub usage
{
    pod2usage(-verbose => 99, -sections => [qw(USAGE DESCRIPTION)]);
    exit 1;
}


__END__

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2012 by Yandex LLC.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
